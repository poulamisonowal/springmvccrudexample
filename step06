Create DAO layer
Create CustomerDao interface inside com.dao package
package com.dao;

import java.util.List;

import com.entity.Customer;

public interface CustomerDAO {

	public List<Customer> getCustomers();

	public void saveCustomer(Customer theCustomer);

	public Customer getCustomer(int theId);

	public void deleteCustomer(int theId);
	
}

Create CustomerDAOImpl class in com.dao package to implement CustomerDao interface

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.query.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.entity.Customer;

@Service("custDao")
@Transactional
public class CustomerDAOImpl implements CustomerDAO {

	// need to inject the session factory

	@Autowired
	private SessionFactory sf;
	
	Session currentSession ;		
	@Override
	public List<Customer> getCustomers() {
		
		// get the current hibernate session
		try {
		
		currentSession = sf.getCurrentSession();
		}catch(Exception ex)	{
			currentSession = sf.openSession();	
		}
		
		// create a query  ... sort by last name
		Query<Customer> theQuery = 
				currentSession.createQuery("from Customer",
											Customer.class);
		
		// execute query and get result list
		List<Customer> customers = theQuery.getResultList();
				
		// return the results		
		return customers;
	}

	@Override
	
	  public void saveCustomer(Customer theCustomer) {
	  
	  // get current hibernate session
		Session currentSession =sf.getCurrentSession();
	  
	  // save/upate the customer ... finally LOL
	  currentSession.saveOrUpdate(theCustomer);
	  
	  }
	 

	public Customer getCustomer(int theId) {

		// get the current hibernate session
		Session currentSession = sf.getCurrentSession();
		
		// now retrieve/read from database using the primary key
		Customer theCustomer = currentSession.get(Customer.class, theId);
		
		return theCustomer;
	}

	
	  @Override public void deleteCustomer(int theId) {
	  
	  // get the current hibernate session 
		  Session currentSession =sf.getCurrentSession();
	  
	  // delete object with primary key 
		  Query theQuery =currentSession.createQuery("delete from Customer where id=:customerId");
	  theQuery.setParameter("customerId", theId);
	  
	  theQuery.executeUpdate(); }
	 

}
Note
@Transactional ensures JDBC connection through Hibernate is transactional that is either transaction will commit or roll back
